//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Oct 20 16:24:26 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_load_A                     O     1 const
// RDY_load_B                     O     1 const
// RDY_load_C                     O     1 const
// RDY_load_s1_or_s2              O     1 const
// get_MAC                        O    32 reg
// RDY_get_MAC                    O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// load_A_a                       I    16 reg
// load_B_b                       I    16 reg
// load_C_c                       I    32 reg
// load_s1_or_s2_sel              I     1 reg
// EN_load_A                      I     1
// EN_load_B                      I     1
// EN_load_C                      I     1
// EN_load_s1_or_s2               I     1
// EN_get_MAC                     I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMacUnitTop(CLK,
		    RST_N,

		    load_A_a,
		    EN_load_A,
		    RDY_load_A,

		    load_B_b,
		    EN_load_B,
		    RDY_load_B,

		    load_C_c,
		    EN_load_C,
		    RDY_load_C,

		    load_s1_or_s2_sel,
		    EN_load_s1_or_s2,
		    RDY_load_s1_or_s2,

		    EN_get_MAC,
		    get_MAC,
		    RDY_get_MAC);
  input  CLK;
  input  RST_N;

  // action method load_A
  input  [15 : 0] load_A_a;
  input  EN_load_A;
  output RDY_load_A;

  // action method load_B
  input  [15 : 0] load_B_b;
  input  EN_load_B;
  output RDY_load_B;

  // action method load_C
  input  [31 : 0] load_C_c;
  input  EN_load_C;
  output RDY_load_C;

  // action method load_s1_or_s2
  input  load_s1_or_s2_sel;
  input  EN_load_s1_or_s2;
  output RDY_load_s1_or_s2;

  // actionvalue method get_MAC
  input  EN_get_MAC;
  output [31 : 0] get_MAC;
  output RDY_get_MAC;

  // signals for module outputs
  wire [31 : 0] get_MAC;
  wire RDY_get_MAC, RDY_load_A, RDY_load_B, RDY_load_C, RDY_load_s1_or_s2;

  // register bf16_Mac_reg_A
  reg [15 : 0] bf16_Mac_reg_A;
  wire [15 : 0] bf16_Mac_reg_A$D_IN;
  wire bf16_Mac_reg_A$EN;

  // register bf16_Mac_reg_B
  reg [15 : 0] bf16_Mac_reg_B;
  wire [15 : 0] bf16_Mac_reg_B$D_IN;
  wire bf16_Mac_reg_B$EN;

  // register bf16_Mac_reg_C
  reg [31 : 0] bf16_Mac_reg_C;
  wire [31 : 0] bf16_Mac_reg_C$D_IN;
  wire bf16_Mac_reg_C$EN;

  // register bf16_Mac_result
  reg [31 : 0] bf16_Mac_result;
  wire [31 : 0] bf16_Mac_result$D_IN;
  wire bf16_Mac_result$EN;

  // register int_Mac_reg_A
  reg [7 : 0] int_Mac_reg_A;
  wire [7 : 0] int_Mac_reg_A$D_IN;
  wire int_Mac_reg_A$EN;

  // register int_Mac_reg_B
  reg [7 : 0] int_Mac_reg_B;
  wire [7 : 0] int_Mac_reg_B$D_IN;
  wire int_Mac_reg_B$EN;

  // register int_Mac_reg_C
  reg [31 : 0] int_Mac_reg_C;
  wire [31 : 0] int_Mac_reg_C$D_IN;
  wire int_Mac_reg_C$EN;

  // register int_Mac_result
  reg [31 : 0] int_Mac_result;
  wire [31 : 0] int_Mac_result$D_IN;
  wire int_Mac_result$EN;

  // register reg_s1_or_s2
  reg reg_s1_or_s2;
  wire reg_s1_or_s2$D_IN, reg_s1_or_s2$EN;

  // register result
  reg [31 : 0] result;
  wire [31 : 0] result$D_IN;
  wire result$EN;

  // remaining internal signals
  wire [47 : 0] IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d322,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d325,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d328,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d331,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d334,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d337,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d340,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d343,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d346,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d349,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d352,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d355,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d358,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d361,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d364,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d367,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d370,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d373,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d376,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d379,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d382,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d385,
		IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d390,
		product__h11554,
		product__h11590,
		product__h11626,
		product__h11662,
		product__h11698,
		product__h11734,
		product__h11770,
		product__h11806,
		product__h11842,
		product__h11878,
		product__h11914,
		product__h11950,
		product__h11986,
		product__h12022,
		product__h12058,
		product__h12094,
		product__h12130,
		product__h12166,
		product__h12202,
		product__h12238,
		product__h12274,
		product__h12310,
		product__h12346,
		x__h11530,
		y__h11531,
		y__h11567,
		y__h11603,
		y__h11639,
		y__h11675,
		y__h11711,
		y__h11747,
		y__h11783,
		y__h11819,
		y__h11855,
		y__h11891,
		y__h11927,
		y__h11963,
		y__h11999,
		y__h12035,
		y__h12071,
		y__h12107,
		y__h12143,
		y__h12179,
		y__h12215,
		y__h12251,
		y__h12287,
		y__h12323;
  wire [32 : 0] IF_IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0__ETC__q2,
		IF_IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg__ETC__q1;
  wire [31 : 0] IF_IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0__ETC__q4,
		IF_IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg__ETC__q3,
		IF_int_Mac_reg_B_BIT_1_THEN_IF_int_Mac_reg_B_B_ETC___d15,
		IF_int_Mac_reg_B_BIT_2_THEN_IF_int_Mac_reg_B_B_ETC___d18,
		IF_int_Mac_reg_B_BIT_3_THEN_IF_int_Mac_reg_B_B_ETC___d21,
		IF_int_Mac_reg_B_BIT_4_THEN_IF_int_Mac_reg_B_B_ETC___d24,
		IF_int_Mac_reg_B_BIT_5_THEN_IF_int_Mac_reg_B_B_ETC___d27,
		IF_int_Mac_reg_B_BIT_6_THEN_IF_int_Mac_reg_B_B_ETC___d30,
		IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33,
		bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281,
		bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291,
		fp32__h11030,
		fp32__h11031,
		fp32__h11159,
		fp32__h11160,
		product__h1103,
		product__h1140,
		product__h1177,
		product__h1214,
		product__h1251,
		product__h1288,
		product__h1325,
		product__h1362,
		x__h1337,
		y__h11044,
		y__h11056,
		y__h1116,
		y__h11173,
		y__h11185,
		y__h1153,
		y__h1190,
		y__h1227,
		y__h1264,
		y__h1301,
		y__h1338;
  wire [30 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401;
  wire [29 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d635,
		IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d271;
  wire [27 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d634,
		IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d270;
  wire [25 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d633,
		IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d269;
  wire [23 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d632,
		IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d268;
  wire [22 : 0] mantissa_rounded___1__h12555;
  wire [21 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d631,
		IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d267;
  wire [19 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d630,
		IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d266;
  wire [17 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d629,
		IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d265;
  wire [15 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d628,
		IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d264;
  wire [13 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d627,
		IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d263;
  wire [11 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d626,
		IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d262;
  wire [9 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d625,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d261;
  wire [7 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d624,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d260,
	       exponent_sum___1__h12556,
	       exponent_sum__h11008,
	       x__h12573;
  wire [5 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d623,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d259;
  wire [3 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d622,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d258;
  wire [1 : 0] IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d621,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d257;
  wire x__h12731,
       x__h12999,
       x__h13090,
       x__h13271,
       x__h13362,
       x__h13542,
       x__h13633,
       x__h13813,
       x__h13904,
       x__h14084,
       x__h14175,
       x__h14355,
       x__h14446,
       x__h14626,
       x__h14717,
       x__h14897,
       x__h14988,
       x__h15168,
       x__h15259,
       x__h15439,
       x__h1553,
       x__h15530,
       x__h15710,
       x__h15801,
       x__h15981,
       x__h16072,
       x__h16252,
       x__h16343,
       x__h16523,
       x__h16614,
       x__h16794,
       x__h16885,
       x__h17065,
       x__h17156,
       x__h17336,
       x__h17427,
       x__h17607,
       x__h17698,
       x__h17878,
       x__h17969,
       x__h18149,
       x__h1824,
       x__h18240,
       x__h18420,
       x__h18511,
       x__h18691,
       x__h18782,
       x__h18962,
       x__h19053,
       x__h1916,
       x__h19233,
       x__h19324,
       x__h19504,
       x__h19595,
       x__h19775,
       x__h19866,
       x__h20046,
       x__h20137,
       x__h20317,
       x__h20408,
       x__h20588,
       x__h20679,
       x__h20859,
       x__h20861,
       x__h20950,
       x__h2099,
       x__h2191,
       x__h2373,
       x__h2465,
       x__h2647,
       x__h2739,
       x__h2921,
       x__h3013,
       x__h3195,
       x__h3287,
       x__h3469,
       x__h3561,
       x__h3743,
       x__h3835,
       x__h4017,
       x__h4109,
       x__h4291,
       x__h4383,
       x__h4565,
       x__h4657,
       x__h4839,
       x__h4931,
       x__h5113,
       x__h5205,
       x__h5387,
       x__h5479,
       x__h5661,
       x__h5753,
       x__h5935,
       x__h6027,
       x__h6209,
       x__h6301,
       x__h6483,
       x__h6575,
       x__h6757,
       x__h6849,
       x__h7031,
       x__h7123,
       x__h7305,
       x__h7397,
       x__h7579,
       x__h7671,
       x__h7853,
       x__h7945,
       x__h8127,
       x__h8219,
       x__h8401,
       x__h8493,
       x__h8675,
       x__h8767,
       x__h8949,
       x__h9041,
       x__h9223,
       x__h9315,
       x__h9497,
       x__h9589,
       x__h9771,
       x__h9863,
       y__h13000,
       y__h13091,
       y__h13272,
       y__h13363,
       y__h13543,
       y__h13634,
       y__h13814,
       y__h13905,
       y__h14085,
       y__h14176,
       y__h14356,
       y__h14447,
       y__h14627,
       y__h14718,
       y__h14898,
       y__h14989,
       y__h15169,
       y__h15260,
       y__h15440,
       y__h15531,
       y__h15711,
       y__h15802,
       y__h15982,
       y__h16073,
       y__h16253,
       y__h16344,
       y__h16524,
       y__h16615,
       y__h16795,
       y__h16886,
       y__h17066,
       y__h17157,
       y__h17337,
       y__h17428,
       y__h17608,
       y__h17699,
       y__h17879,
       y__h17970,
       y__h18150,
       y__h18241,
       y__h1825,
       y__h18421,
       y__h18512,
       y__h18692,
       y__h18783,
       y__h18963,
       y__h19054,
       y__h1917,
       y__h19234,
       y__h19325,
       y__h19505,
       y__h19596,
       y__h19776,
       y__h19867,
       y__h20047,
       y__h20138,
       y__h20318,
       y__h20409,
       y__h20589,
       y__h20680,
       y__h20860,
       y__h20951,
       y__h2100,
       y__h2192,
       y__h2374,
       y__h2466,
       y__h2648,
       y__h2740,
       y__h2922,
       y__h3014,
       y__h3196,
       y__h3288,
       y__h3470,
       y__h3562,
       y__h3744,
       y__h3836,
       y__h4018,
       y__h4110,
       y__h4292,
       y__h4384,
       y__h4566,
       y__h4658,
       y__h4840,
       y__h4932,
       y__h5114,
       y__h5206,
       y__h5388,
       y__h5480,
       y__h5662,
       y__h5754,
       y__h5936,
       y__h6028,
       y__h6210,
       y__h6302,
       y__h6484,
       y__h6576,
       y__h6758,
       y__h6850,
       y__h7032,
       y__h7124,
       y__h7306,
       y__h7398,
       y__h7580,
       y__h7672,
       y__h7854,
       y__h7946,
       y__h8128,
       y__h8220,
       y__h8402,
       y__h8494,
       y__h8676,
       y__h8768,
       y__h8950,
       y__h9042,
       y__h9224,
       y__h9316,
       y__h9498,
       y__h9590,
       y__h9772,
       y__h9864;

  // action method load_A
  assign RDY_load_A = 1'd1 ;

  // action method load_B
  assign RDY_load_B = 1'd1 ;

  // action method load_C
  assign RDY_load_C = 1'd1 ;

  // action method load_s1_or_s2
  assign RDY_load_s1_or_s2 = 1'd1 ;

  // actionvalue method get_MAC
  assign get_MAC = result ;
  assign RDY_get_MAC = 1'd1 ;

  // register bf16_Mac_reg_A
  assign bf16_Mac_reg_A$D_IN = load_A_a ;
  assign bf16_Mac_reg_A$EN = EN_load_A && reg_s1_or_s2 ;

  // register bf16_Mac_reg_B
  assign bf16_Mac_reg_B$D_IN = load_B_b ;
  assign bf16_Mac_reg_B$EN = EN_load_B && reg_s1_or_s2 ;

  // register bf16_Mac_reg_C
  assign bf16_Mac_reg_C$D_IN = load_C_c ;
  assign bf16_Mac_reg_C$EN = EN_load_C && reg_s1_or_s2 ;

  // register bf16_Mac_result
  assign bf16_Mac_result$D_IN =
	     { x__h20859 ^ y__h20860,
	       x__h20588 ^ y__h20589,
	       IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d635 } ;
  assign bf16_Mac_result$EN = 1'd1 ;

  // register int_Mac_reg_A
  assign int_Mac_reg_A$D_IN = load_A_a[7:0] ;
  assign int_Mac_reg_A$EN = EN_load_A && !reg_s1_or_s2 ;

  // register int_Mac_reg_B
  assign int_Mac_reg_B$D_IN = load_B_b[7:0] ;
  assign int_Mac_reg_B$EN = EN_load_B && !reg_s1_or_s2 ;

  // register int_Mac_reg_C
  assign int_Mac_reg_C$D_IN = load_C_c ;
  assign int_Mac_reg_C$EN = EN_load_C && !reg_s1_or_s2 ;

  // register int_Mac_result
  assign int_Mac_result$D_IN =
	     { x__h9771 ^ y__h9772,
	       x__h9497 ^ y__h9498,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d271 } ;
  assign int_Mac_result$EN = 1'd1 ;

  // register reg_s1_or_s2
  assign reg_s1_or_s2$D_IN = load_s1_or_s2_sel ;
  assign reg_s1_or_s2$EN = EN_load_s1_or_s2 ;

  // register result
  assign result$D_IN = reg_s1_or_s2 ? bf16_Mac_result : int_Mac_result ;
  assign result$EN = 1'd1 ;

  // remaining internal signals
  assign IF_IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0__ETC__q2 =
	     (IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[0] &
	      bf16_Mac_reg_C[0]) ?
	       33'd2 :
	       33'd0 ;
  assign IF_IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0__ETC__q4 =
	     (IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[0] ^
	      bf16_Mac_reg_C[0]) ?
	       32'd1 :
	       32'd0 ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d390[38] ?
	       { exponent_sum___1__h12556, mantissa_rounded___1__h12555 } :
	       { exponent_sum__h11008,
		 IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d390[38:16] } ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d621 =
	     { x__h12731 ^
	       IF_IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0__ETC__q2[1],
	       IF_IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0__ETC__q4[0] } ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d622 =
	     { x__h13271 ^ y__h13272,
	       x__h12999 ^ y__h13000,
	       IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d621 } ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d623 =
	     { x__h13813 ^ y__h13814,
	       x__h13542 ^ y__h13543,
	       IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d622 } ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d624 =
	     { x__h14355 ^ y__h14356,
	       x__h14084 ^ y__h14085,
	       IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d623 } ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d625 =
	     { x__h14897 ^ y__h14898,
	       x__h14626 ^ y__h14627,
	       IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d624 } ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d626 =
	     { x__h15439 ^ y__h15440,
	       x__h15168 ^ y__h15169,
	       IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d625 } ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d627 =
	     { x__h15981 ^ y__h15982,
	       x__h15710 ^ y__h15711,
	       IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d626 } ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d628 =
	     { x__h16523 ^ y__h16524,
	       x__h16252 ^ y__h16253,
	       IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d627 } ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d629 =
	     { x__h17065 ^ y__h17066,
	       x__h16794 ^ y__h16795,
	       IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d628 } ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d630 =
	     { x__h17607 ^ y__h17608,
	       x__h17336 ^ y__h17337,
	       IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d629 } ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d631 =
	     { x__h18149 ^ y__h18150,
	       x__h17878 ^ y__h17879,
	       IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d630 } ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d632 =
	     { x__h18691 ^ y__h18692,
	       x__h18420 ^ y__h18421,
	       IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d631 } ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d633 =
	     { x__h19233 ^ y__h19234,
	       x__h18962 ^ y__h18963,
	       IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d632 } ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d634 =
	     { x__h19775 ^ y__h19776,
	       x__h19504 ^ y__h19505,
	       IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d633 } ;
  assign IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d635 =
	     { x__h20317 ^ y__h20318,
	       x__h20046 ^ y__h20047,
	       IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d634 } ;
  assign IF_IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg__ETC__q1 =
	     (IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[0] &
	      int_Mac_reg_C[0]) ?
	       33'd2 :
	       33'd0 ;
  assign IF_IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg__ETC__q3 =
	     (IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[0] ^
	      int_Mac_reg_C[0]) ?
	       32'd1 :
	       32'd0 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d322 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[0] ?
	       product__h12346 :
	       48'd0 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d325 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[1] ?
	       product__h12310 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d322 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d328 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[2] ?
	       product__h12274 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d325 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d331 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[3] ?
	       product__h12238 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d328 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d334 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[4] ?
	       product__h12202 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d331 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d337 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[5] ?
	       product__h12166 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d334 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d340 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[6] ?
	       product__h12130 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d337 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d343 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[7] ?
	       product__h12094 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d340 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d346 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[8] ?
	       product__h12058 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d343 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d349 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[9] ?
	       product__h12022 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d346 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d352 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[10] ?
	       product__h11986 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d349 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d355 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[11] ?
	       product__h11950 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d352 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d358 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[12] ?
	       product__h11914 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d355 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d361 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[13] ?
	       product__h11878 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d358 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d364 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[14] ?
	       product__h11842 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d361 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d367 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[15] ?
	       product__h11806 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d364 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d370 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[16] ?
	       product__h11770 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d367 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d373 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[17] ?
	       product__h11734 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d370 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d376 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[18] ?
	       product__h11698 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d373 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d379 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[19] ?
	       product__h11662 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d376 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d382 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[20] ?
	       product__h11626 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d379 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d385 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[21] ?
	       product__h11590 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d382 ;
  assign IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d390 =
	     x__h11530 ^ y__h11531 ;
  assign IF_int_Mac_reg_B_BIT_1_THEN_IF_int_Mac_reg_B_B_ETC___d15 =
	     int_Mac_reg_B[1] ? product__h1325 : x__h1337 ;
  assign IF_int_Mac_reg_B_BIT_2_THEN_IF_int_Mac_reg_B_B_ETC___d18 =
	     int_Mac_reg_B[2] ?
	       product__h1288 :
	       IF_int_Mac_reg_B_BIT_1_THEN_IF_int_Mac_reg_B_B_ETC___d15 ;
  assign IF_int_Mac_reg_B_BIT_3_THEN_IF_int_Mac_reg_B_B_ETC___d21 =
	     int_Mac_reg_B[3] ?
	       product__h1251 :
	       IF_int_Mac_reg_B_BIT_2_THEN_IF_int_Mac_reg_B_B_ETC___d18 ;
  assign IF_int_Mac_reg_B_BIT_4_THEN_IF_int_Mac_reg_B_B_ETC___d24 =
	     int_Mac_reg_B[4] ?
	       product__h1214 :
	       IF_int_Mac_reg_B_BIT_3_THEN_IF_int_Mac_reg_B_B_ETC___d21 ;
  assign IF_int_Mac_reg_B_BIT_5_THEN_IF_int_Mac_reg_B_B_ETC___d27 =
	     int_Mac_reg_B[5] ?
	       product__h1177 :
	       IF_int_Mac_reg_B_BIT_4_THEN_IF_int_Mac_reg_B_B_ETC___d24 ;
  assign IF_int_Mac_reg_B_BIT_6_THEN_IF_int_Mac_reg_B_B_ETC___d30 =
	     int_Mac_reg_B[6] ?
	       product__h1140 :
	       IF_int_Mac_reg_B_BIT_5_THEN_IF_int_Mac_reg_B_B_ETC___d27 ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d257 =
	     { x__h1553 ^
	       IF_IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg__ETC__q1[1],
	       IF_IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg__ETC__q3[0] } ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d258 =
	     { x__h2099 ^ y__h2100,
	       x__h1824 ^ y__h1825,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d257 } ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d259 =
	     { x__h2647 ^ y__h2648,
	       x__h2373 ^ y__h2374,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d258 } ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d260 =
	     { x__h3195 ^ y__h3196,
	       x__h2921 ^ y__h2922,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d259 } ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d261 =
	     { x__h3743 ^ y__h3744,
	       x__h3469 ^ y__h3470,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d260 } ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d262 =
	     { x__h4291 ^ y__h4292,
	       x__h4017 ^ y__h4018,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d261 } ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d263 =
	     { x__h4839 ^ y__h4840,
	       x__h4565 ^ y__h4566,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d262 } ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d264 =
	     { x__h5387 ^ y__h5388,
	       x__h5113 ^ y__h5114,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d263 } ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d265 =
	     { x__h5935 ^ y__h5936,
	       x__h5661 ^ y__h5662,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d264 } ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d266 =
	     { x__h6483 ^ y__h6484,
	       x__h6209 ^ y__h6210,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d265 } ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d267 =
	     { x__h7031 ^ y__h7032,
	       x__h6757 ^ y__h6758,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d266 } ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d268 =
	     { x__h7579 ^ y__h7580,
	       x__h7305 ^ y__h7306,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d267 } ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d269 =
	     { x__h8127 ^ y__h8128,
	       x__h7853 ^ y__h7854,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d268 } ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d270 =
	     { x__h8675 ^ y__h8676,
	       x__h8401 ^ y__h8402,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d269 } ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d271 =
	     { x__h9223 ^ y__h9224,
	       x__h8949 ^ y__h8950,
	       IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d270 } ;
  assign IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33 =
	     int_Mac_reg_B[7] ?
	       product__h1103 :
	       IF_int_Mac_reg_B_BIT_6_THEN_IF_int_Mac_reg_B_B_ETC___d30 ;
  assign bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281 =
	     fp32__h11031 | y__h11044 ;
  assign bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291 =
	     fp32__h11160 | y__h11173 ;
  assign exponent_sum___1__h12556 = exponent_sum__h11008 + 8'd1 ;
  assign exponent_sum__h11008 = x__h12573 - 8'd127 ;
  assign fp32__h11030 = { bf16_Mac_reg_A[15], 31'd0 } ;
  assign fp32__h11031 = fp32__h11030 | y__h11056 ;
  assign fp32__h11159 = { bf16_Mac_reg_B[15], 31'd0 } ;
  assign fp32__h11160 = fp32__h11159 | y__h11185 ;
  assign mantissa_rounded___1__h12555 =
	     { 1'd0,
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d390[38:17] } ;
  assign product__h1103 =
	     IF_int_Mac_reg_B_BIT_6_THEN_IF_int_Mac_reg_B_B_ETC___d30 ^
	     y__h1116 ;
  assign product__h1140 =
	     IF_int_Mac_reg_B_BIT_5_THEN_IF_int_Mac_reg_B_B_ETC___d27 ^
	     y__h1153 ;
  assign product__h11554 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d385 ^
	     y__h11567 ;
  assign product__h11590 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d382 ^
	     y__h11603 ;
  assign product__h11626 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d379 ^
	     y__h11639 ;
  assign product__h11662 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d376 ^
	     y__h11675 ;
  assign product__h11698 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d373 ^
	     y__h11711 ;
  assign product__h11734 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d370 ^
	     y__h11747 ;
  assign product__h1177 =
	     IF_int_Mac_reg_B_BIT_4_THEN_IF_int_Mac_reg_B_B_ETC___d24 ^
	     y__h1190 ;
  assign product__h11770 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d367 ^
	     y__h11783 ;
  assign product__h11806 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d364 ^
	     y__h11819 ;
  assign product__h11842 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d361 ^
	     y__h11855 ;
  assign product__h11878 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d358 ^
	     y__h11891 ;
  assign product__h11914 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d355 ^
	     y__h11927 ;
  assign product__h11950 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d352 ^
	     y__h11963 ;
  assign product__h11986 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d349 ^
	     y__h11999 ;
  assign product__h12022 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d346 ^
	     y__h12035 ;
  assign product__h12058 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d343 ^
	     y__h12071 ;
  assign product__h12094 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d340 ^
	     y__h12107 ;
  assign product__h12130 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d337 ^
	     y__h12143 ;
  assign product__h1214 =
	     IF_int_Mac_reg_B_BIT_3_THEN_IF_int_Mac_reg_B_B_ETC___d21 ^
	     y__h1227 ;
  assign product__h12166 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d334 ^
	     y__h12179 ;
  assign product__h12202 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d331 ^
	     y__h12215 ;
  assign product__h12238 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d328 ^
	     y__h12251 ;
  assign product__h12274 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d325 ^
	     y__h12287 ;
  assign product__h12310 =
	     IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d322 ^
	     y__h12323 ;
  assign product__h12346 =
	     { 25'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0] } ;
  assign product__h1251 =
	     IF_int_Mac_reg_B_BIT_2_THEN_IF_int_Mac_reg_B_B_ETC___d18 ^
	     y__h1264 ;
  assign product__h1288 =
	     IF_int_Mac_reg_B_BIT_1_THEN_IF_int_Mac_reg_B_B_ETC___d15 ^
	     y__h1301 ;
  assign product__h1325 = x__h1337 ^ y__h1338 ;
  assign product__h1362 = { 24'd0, int_Mac_reg_A } ;
  assign x__h11530 =
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[22] ?
	       product__h11554 :
	       IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR__ETC___d385 ;
  assign x__h12573 =
	     bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[30:23] +
	     bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[30:23] ;
  assign x__h12731 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[1] ^
	     bf16_Mac_reg_C[1] ;
  assign x__h12999 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[2] ^
	     bf16_Mac_reg_C[2] ;
  assign x__h13090 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[1] &
	     bf16_Mac_reg_C[1] ;
  assign x__h13271 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[3] ^
	     bf16_Mac_reg_C[3] ;
  assign x__h13362 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[2] &
	     bf16_Mac_reg_C[2] ;
  assign x__h1337 = int_Mac_reg_B[0] ? product__h1362 : 32'd0 ;
  assign x__h13542 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[4] ^
	     bf16_Mac_reg_C[4] ;
  assign x__h13633 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[3] &
	     bf16_Mac_reg_C[3] ;
  assign x__h13813 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[5] ^
	     bf16_Mac_reg_C[5] ;
  assign x__h13904 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[4] &
	     bf16_Mac_reg_C[4] ;
  assign x__h14084 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[6] ^
	     bf16_Mac_reg_C[6] ;
  assign x__h14175 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[5] &
	     bf16_Mac_reg_C[5] ;
  assign x__h14355 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[7] ^
	     bf16_Mac_reg_C[7] ;
  assign x__h14446 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[6] &
	     bf16_Mac_reg_C[6] ;
  assign x__h14626 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[8] ^
	     bf16_Mac_reg_C[8] ;
  assign x__h14717 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[7] &
	     bf16_Mac_reg_C[7] ;
  assign x__h14897 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[9] ^
	     bf16_Mac_reg_C[9] ;
  assign x__h14988 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[8] &
	     bf16_Mac_reg_C[8] ;
  assign x__h15168 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[10] ^
	     bf16_Mac_reg_C[10] ;
  assign x__h15259 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[9] &
	     bf16_Mac_reg_C[9] ;
  assign x__h15439 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[11] ^
	     bf16_Mac_reg_C[11] ;
  assign x__h1553 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[1] ^
	     int_Mac_reg_C[1] ;
  assign x__h15530 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[10] &
	     bf16_Mac_reg_C[10] ;
  assign x__h15710 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[12] ^
	     bf16_Mac_reg_C[12] ;
  assign x__h15801 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[11] &
	     bf16_Mac_reg_C[11] ;
  assign x__h15981 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[13] ^
	     bf16_Mac_reg_C[13] ;
  assign x__h16072 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[12] &
	     bf16_Mac_reg_C[12] ;
  assign x__h16252 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[14] ^
	     bf16_Mac_reg_C[14] ;
  assign x__h16343 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[13] &
	     bf16_Mac_reg_C[13] ;
  assign x__h16523 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[15] ^
	     bf16_Mac_reg_C[15] ;
  assign x__h16614 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[14] &
	     bf16_Mac_reg_C[14] ;
  assign x__h16794 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[16] ^
	     bf16_Mac_reg_C[16] ;
  assign x__h16885 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[15] &
	     bf16_Mac_reg_C[15] ;
  assign x__h17065 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[17] ^
	     bf16_Mac_reg_C[17] ;
  assign x__h17156 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[16] &
	     bf16_Mac_reg_C[16] ;
  assign x__h17336 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[18] ^
	     bf16_Mac_reg_C[18] ;
  assign x__h17427 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[17] &
	     bf16_Mac_reg_C[17] ;
  assign x__h17607 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[19] ^
	     bf16_Mac_reg_C[19] ;
  assign x__h17698 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[18] &
	     bf16_Mac_reg_C[18] ;
  assign x__h17878 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[20] ^
	     bf16_Mac_reg_C[20] ;
  assign x__h17969 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[19] &
	     bf16_Mac_reg_C[19] ;
  assign x__h18149 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[21] ^
	     bf16_Mac_reg_C[21] ;
  assign x__h1824 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[2] ^
	     int_Mac_reg_C[2] ;
  assign x__h18240 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[20] &
	     bf16_Mac_reg_C[20] ;
  assign x__h18420 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[22] ^
	     bf16_Mac_reg_C[22] ;
  assign x__h18511 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[21] &
	     bf16_Mac_reg_C[21] ;
  assign x__h18691 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[23] ^
	     bf16_Mac_reg_C[23] ;
  assign x__h18782 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[22] &
	     bf16_Mac_reg_C[22] ;
  assign x__h18962 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[24] ^
	     bf16_Mac_reg_C[24] ;
  assign x__h19053 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[23] &
	     bf16_Mac_reg_C[23] ;
  assign x__h1916 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[1] &
	     int_Mac_reg_C[1] ;
  assign x__h19233 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[25] ^
	     bf16_Mac_reg_C[25] ;
  assign x__h19324 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[24] &
	     bf16_Mac_reg_C[24] ;
  assign x__h19504 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[26] ^
	     bf16_Mac_reg_C[26] ;
  assign x__h19595 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[25] &
	     bf16_Mac_reg_C[25] ;
  assign x__h19775 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[27] ^
	     bf16_Mac_reg_C[27] ;
  assign x__h19866 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[26] &
	     bf16_Mac_reg_C[26] ;
  assign x__h20046 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[28] ^
	     bf16_Mac_reg_C[28] ;
  assign x__h20137 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[27] &
	     bf16_Mac_reg_C[27] ;
  assign x__h20317 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[29] ^
	     bf16_Mac_reg_C[29] ;
  assign x__h20408 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[28] &
	     bf16_Mac_reg_C[28] ;
  assign x__h20588 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[30] ^
	     bf16_Mac_reg_C[30] ;
  assign x__h20679 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[29] &
	     bf16_Mac_reg_C[29] ;
  assign x__h20859 = x__h20861 ^ bf16_Mac_reg_C[31] ;
  assign x__h20861 =
	     bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[31] ^
	     bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85_OR_0_C_ETC___d291[31] ;
  assign x__h20950 =
	     IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0_85__ETC___d401[30] &
	     bf16_Mac_reg_C[30] ;
  assign x__h2099 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[3] ^
	     int_Mac_reg_C[3] ;
  assign x__h2191 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[2] &
	     int_Mac_reg_C[2] ;
  assign x__h2373 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[4] ^
	     int_Mac_reg_C[4] ;
  assign x__h2465 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[3] &
	     int_Mac_reg_C[3] ;
  assign x__h2647 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[5] ^
	     int_Mac_reg_C[5] ;
  assign x__h2739 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[4] &
	     int_Mac_reg_C[4] ;
  assign x__h2921 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[6] ^
	     int_Mac_reg_C[6] ;
  assign x__h3013 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[5] &
	     int_Mac_reg_C[5] ;
  assign x__h3195 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[7] ^
	     int_Mac_reg_C[7] ;
  assign x__h3287 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[6] &
	     int_Mac_reg_C[6] ;
  assign x__h3469 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[8] ^
	     int_Mac_reg_C[8] ;
  assign x__h3561 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[7] &
	     int_Mac_reg_C[7] ;
  assign x__h3743 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[9] ^
	     int_Mac_reg_C[9] ;
  assign x__h3835 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[8] &
	     int_Mac_reg_C[8] ;
  assign x__h4017 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[10] ^
	     int_Mac_reg_C[10] ;
  assign x__h4109 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[9] &
	     int_Mac_reg_C[9] ;
  assign x__h4291 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[11] ^
	     int_Mac_reg_C[11] ;
  assign x__h4383 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[10] &
	     int_Mac_reg_C[10] ;
  assign x__h4565 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[12] ^
	     int_Mac_reg_C[12] ;
  assign x__h4657 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[11] &
	     int_Mac_reg_C[11] ;
  assign x__h4839 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[13] ^
	     int_Mac_reg_C[13] ;
  assign x__h4931 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[12] &
	     int_Mac_reg_C[12] ;
  assign x__h5113 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[14] ^
	     int_Mac_reg_C[14] ;
  assign x__h5205 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[13] &
	     int_Mac_reg_C[13] ;
  assign x__h5387 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[15] ^
	     int_Mac_reg_C[15] ;
  assign x__h5479 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[14] &
	     int_Mac_reg_C[14] ;
  assign x__h5661 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[16] ^
	     int_Mac_reg_C[16] ;
  assign x__h5753 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[15] &
	     int_Mac_reg_C[15] ;
  assign x__h5935 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[17] ^
	     int_Mac_reg_C[17] ;
  assign x__h6027 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[16] &
	     int_Mac_reg_C[16] ;
  assign x__h6209 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[18] ^
	     int_Mac_reg_C[18] ;
  assign x__h6301 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[17] &
	     int_Mac_reg_C[17] ;
  assign x__h6483 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[19] ^
	     int_Mac_reg_C[19] ;
  assign x__h6575 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[18] &
	     int_Mac_reg_C[18] ;
  assign x__h6757 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[20] ^
	     int_Mac_reg_C[20] ;
  assign x__h6849 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[19] &
	     int_Mac_reg_C[19] ;
  assign x__h7031 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[21] ^
	     int_Mac_reg_C[21] ;
  assign x__h7123 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[20] &
	     int_Mac_reg_C[20] ;
  assign x__h7305 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[22] ^
	     int_Mac_reg_C[22] ;
  assign x__h7397 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[21] &
	     int_Mac_reg_C[21] ;
  assign x__h7579 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[23] ^
	     int_Mac_reg_C[23] ;
  assign x__h7671 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[22] &
	     int_Mac_reg_C[22] ;
  assign x__h7853 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[24] ^
	     int_Mac_reg_C[24] ;
  assign x__h7945 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[23] &
	     int_Mac_reg_C[23] ;
  assign x__h8127 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[25] ^
	     int_Mac_reg_C[25] ;
  assign x__h8219 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[24] &
	     int_Mac_reg_C[24] ;
  assign x__h8401 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[26] ^
	     int_Mac_reg_C[26] ;
  assign x__h8493 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[25] &
	     int_Mac_reg_C[25] ;
  assign x__h8675 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[27] ^
	     int_Mac_reg_C[27] ;
  assign x__h8767 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[26] &
	     int_Mac_reg_C[26] ;
  assign x__h8949 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[28] ^
	     int_Mac_reg_C[28] ;
  assign x__h9041 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[27] &
	     int_Mac_reg_C[27] ;
  assign x__h9223 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[29] ^
	     int_Mac_reg_C[29] ;
  assign x__h9315 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[28] &
	     int_Mac_reg_C[28] ;
  assign x__h9497 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[30] ^
	     int_Mac_reg_C[30] ;
  assign x__h9589 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[29] &
	     int_Mac_reg_C[29] ;
  assign x__h9771 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[31] ^
	     int_Mac_reg_C[31] ;
  assign x__h9863 =
	     IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg_B_B_ETC___d33[30] &
	     int_Mac_reg_C[30] ;
  assign y__h11044 = { 9'd0, bf16_Mac_reg_A[6:0], 16'd0 } ;
  assign y__h11056 = { 1'd0, bf16_Mac_reg_A[14:7], 23'd0 } ;
  assign y__h1116 = { 17'd0, int_Mac_reg_A, 7'd0 } ;
  assign y__h11173 = { 9'd0, bf16_Mac_reg_B[6:0], 16'd0 } ;
  assign y__h11185 = { 1'd0, bf16_Mac_reg_B[14:7], 23'd0 } ;
  assign y__h1153 = { 18'd0, int_Mac_reg_A, 6'd0 } ;
  assign y__h11531 =
	     { 2'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       23'd0 } ;
  assign y__h11567 =
	     { 3'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       22'd0 } ;
  assign y__h11603 =
	     { 4'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       21'd0 } ;
  assign y__h11639 =
	     { 5'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       20'd0 } ;
  assign y__h11675 =
	     { 6'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       19'd0 } ;
  assign y__h11711 =
	     { 7'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       18'd0 } ;
  assign y__h11747 =
	     { 8'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       17'd0 } ;
  assign y__h11783 =
	     { 9'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       16'd0 } ;
  assign y__h11819 =
	     { 10'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       15'd0 } ;
  assign y__h11855 =
	     { 11'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       14'd0 } ;
  assign y__h11891 =
	     { 12'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       13'd0 } ;
  assign y__h1190 = { 19'd0, int_Mac_reg_A, 5'd0 } ;
  assign y__h11927 =
	     { 13'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       12'd0 } ;
  assign y__h11963 =
	     { 14'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       11'd0 } ;
  assign y__h11999 =
	     { 15'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       10'd0 } ;
  assign y__h12035 =
	     { 16'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       9'd0 } ;
  assign y__h12071 =
	     { 17'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       8'd0 } ;
  assign y__h12107 =
	     { 18'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       7'd0 } ;
  assign y__h12143 =
	     { 19'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       6'd0 } ;
  assign y__h12179 =
	     { 20'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       5'd0 } ;
  assign y__h12215 =
	     { 21'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       4'd0 } ;
  assign y__h12251 =
	     { 22'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       3'd0 } ;
  assign y__h1227 = { 20'd0, int_Mac_reg_A, 4'd0 } ;
  assign y__h12287 =
	     { 23'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       2'd0 } ;
  assign y__h12323 =
	     { 24'd1,
	       bf16_Mac_reg_A_73_BIT_15_74_CONCAT_0_75_OR_0_C_ETC___d281[22:0],
	       1'd0 } ;
  assign y__h1264 = { 21'd0, int_Mac_reg_A, 3'd0 } ;
  assign y__h13000 = x__h13090 | y__h13091 ;
  assign y__h1301 = { 22'd0, int_Mac_reg_A, 2'd0 } ;
  assign y__h13091 =
	     IF_IF_IF_bf16_Mac_reg_B_83_BIT_15_84_CONCAT_0__ETC__q2[1] &
	     x__h12731 ;
  assign y__h13272 = x__h13362 | y__h13363 ;
  assign y__h13363 = y__h13000 & x__h12999 ;
  assign y__h1338 = { 23'd0, int_Mac_reg_A, 1'd0 } ;
  assign y__h13543 = x__h13633 | y__h13634 ;
  assign y__h13634 = y__h13272 & x__h13271 ;
  assign y__h13814 = x__h13904 | y__h13905 ;
  assign y__h13905 = y__h13543 & x__h13542 ;
  assign y__h14085 = x__h14175 | y__h14176 ;
  assign y__h14176 = y__h13814 & x__h13813 ;
  assign y__h14356 = x__h14446 | y__h14447 ;
  assign y__h14447 = y__h14085 & x__h14084 ;
  assign y__h14627 = x__h14717 | y__h14718 ;
  assign y__h14718 = y__h14356 & x__h14355 ;
  assign y__h14898 = x__h14988 | y__h14989 ;
  assign y__h14989 = y__h14627 & x__h14626 ;
  assign y__h15169 = x__h15259 | y__h15260 ;
  assign y__h15260 = y__h14898 & x__h14897 ;
  assign y__h15440 = x__h15530 | y__h15531 ;
  assign y__h15531 = y__h15169 & x__h15168 ;
  assign y__h15711 = x__h15801 | y__h15802 ;
  assign y__h15802 = y__h15440 & x__h15439 ;
  assign y__h15982 = x__h16072 | y__h16073 ;
  assign y__h16073 = y__h15711 & x__h15710 ;
  assign y__h16253 = x__h16343 | y__h16344 ;
  assign y__h16344 = y__h15982 & x__h15981 ;
  assign y__h16524 = x__h16614 | y__h16615 ;
  assign y__h16615 = y__h16253 & x__h16252 ;
  assign y__h16795 = x__h16885 | y__h16886 ;
  assign y__h16886 = y__h16524 & x__h16523 ;
  assign y__h17066 = x__h17156 | y__h17157 ;
  assign y__h17157 = y__h16795 & x__h16794 ;
  assign y__h17337 = x__h17427 | y__h17428 ;
  assign y__h17428 = y__h17066 & x__h17065 ;
  assign y__h17608 = x__h17698 | y__h17699 ;
  assign y__h17699 = y__h17337 & x__h17336 ;
  assign y__h17879 = x__h17969 | y__h17970 ;
  assign y__h17970 = y__h17608 & x__h17607 ;
  assign y__h18150 = x__h18240 | y__h18241 ;
  assign y__h18241 = y__h17879 & x__h17878 ;
  assign y__h1825 = x__h1916 | y__h1917 ;
  assign y__h18421 = x__h18511 | y__h18512 ;
  assign y__h18512 = y__h18150 & x__h18149 ;
  assign y__h18692 = x__h18782 | y__h18783 ;
  assign y__h18783 = y__h18421 & x__h18420 ;
  assign y__h18963 = x__h19053 | y__h19054 ;
  assign y__h19054 = y__h18692 & x__h18691 ;
  assign y__h1917 =
	     IF_IF_int_Mac_reg_B_BIT_7_THEN_IF_int_Mac_reg__ETC__q1[1] &
	     x__h1553 ;
  assign y__h19234 = x__h19324 | y__h19325 ;
  assign y__h19325 = y__h18963 & x__h18962 ;
  assign y__h19505 = x__h19595 | y__h19596 ;
  assign y__h19596 = y__h19234 & x__h19233 ;
  assign y__h19776 = x__h19866 | y__h19867 ;
  assign y__h19867 = y__h19505 & x__h19504 ;
  assign y__h20047 = x__h20137 | y__h20138 ;
  assign y__h20138 = y__h19776 & x__h19775 ;
  assign y__h20318 = x__h20408 | y__h20409 ;
  assign y__h20409 = y__h20047 & x__h20046 ;
  assign y__h20589 = x__h20679 | y__h20680 ;
  assign y__h20680 = y__h20318 & x__h20317 ;
  assign y__h20860 = x__h20950 | y__h20951 ;
  assign y__h20951 = y__h20589 & x__h20588 ;
  assign y__h2100 = x__h2191 | y__h2192 ;
  assign y__h2192 = y__h1825 & x__h1824 ;
  assign y__h2374 = x__h2465 | y__h2466 ;
  assign y__h2466 = y__h2100 & x__h2099 ;
  assign y__h2648 = x__h2739 | y__h2740 ;
  assign y__h2740 = y__h2374 & x__h2373 ;
  assign y__h2922 = x__h3013 | y__h3014 ;
  assign y__h3014 = y__h2648 & x__h2647 ;
  assign y__h3196 = x__h3287 | y__h3288 ;
  assign y__h3288 = y__h2922 & x__h2921 ;
  assign y__h3470 = x__h3561 | y__h3562 ;
  assign y__h3562 = y__h3196 & x__h3195 ;
  assign y__h3744 = x__h3835 | y__h3836 ;
  assign y__h3836 = y__h3470 & x__h3469 ;
  assign y__h4018 = x__h4109 | y__h4110 ;
  assign y__h4110 = y__h3744 & x__h3743 ;
  assign y__h4292 = x__h4383 | y__h4384 ;
  assign y__h4384 = y__h4018 & x__h4017 ;
  assign y__h4566 = x__h4657 | y__h4658 ;
  assign y__h4658 = y__h4292 & x__h4291 ;
  assign y__h4840 = x__h4931 | y__h4932 ;
  assign y__h4932 = y__h4566 & x__h4565 ;
  assign y__h5114 = x__h5205 | y__h5206 ;
  assign y__h5206 = y__h4840 & x__h4839 ;
  assign y__h5388 = x__h5479 | y__h5480 ;
  assign y__h5480 = y__h5114 & x__h5113 ;
  assign y__h5662 = x__h5753 | y__h5754 ;
  assign y__h5754 = y__h5388 & x__h5387 ;
  assign y__h5936 = x__h6027 | y__h6028 ;
  assign y__h6028 = y__h5662 & x__h5661 ;
  assign y__h6210 = x__h6301 | y__h6302 ;
  assign y__h6302 = y__h5936 & x__h5935 ;
  assign y__h6484 = x__h6575 | y__h6576 ;
  assign y__h6576 = y__h6210 & x__h6209 ;
  assign y__h6758 = x__h6849 | y__h6850 ;
  assign y__h6850 = y__h6484 & x__h6483 ;
  assign y__h7032 = x__h7123 | y__h7124 ;
  assign y__h7124 = y__h6758 & x__h6757 ;
  assign y__h7306 = x__h7397 | y__h7398 ;
  assign y__h7398 = y__h7032 & x__h7031 ;
  assign y__h7580 = x__h7671 | y__h7672 ;
  assign y__h7672 = y__h7306 & x__h7305 ;
  assign y__h7854 = x__h7945 | y__h7946 ;
  assign y__h7946 = y__h7580 & x__h7579 ;
  assign y__h8128 = x__h8219 | y__h8220 ;
  assign y__h8220 = y__h7854 & x__h7853 ;
  assign y__h8402 = x__h8493 | y__h8494 ;
  assign y__h8494 = y__h8128 & x__h8127 ;
  assign y__h8676 = x__h8767 | y__h8768 ;
  assign y__h8768 = y__h8402 & x__h8401 ;
  assign y__h8950 = x__h9041 | y__h9042 ;
  assign y__h9042 = y__h8676 & x__h8675 ;
  assign y__h9224 = x__h9315 | y__h9316 ;
  assign y__h9316 = y__h8950 & x__h8949 ;
  assign y__h9498 = x__h9589 | y__h9590 ;
  assign y__h9590 = y__h9224 & x__h9223 ;
  assign y__h9772 = x__h9863 | y__h9864 ;
  assign y__h9864 = y__h9498 & x__h9497 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        bf16_Mac_reg_A <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bf16_Mac_reg_B <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bf16_Mac_reg_C <= `BSV_ASSIGNMENT_DELAY 32'd0;
	bf16_Mac_result <= `BSV_ASSIGNMENT_DELAY 32'd0;
	int_Mac_reg_A <= `BSV_ASSIGNMENT_DELAY 8'd0;
	int_Mac_reg_B <= `BSV_ASSIGNMENT_DELAY 8'd0;
	int_Mac_reg_C <= `BSV_ASSIGNMENT_DELAY 32'd0;
	int_Mac_result <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_s1_or_s2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	result <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (bf16_Mac_reg_A$EN)
	  bf16_Mac_reg_A <= `BSV_ASSIGNMENT_DELAY bf16_Mac_reg_A$D_IN;
	if (bf16_Mac_reg_B$EN)
	  bf16_Mac_reg_B <= `BSV_ASSIGNMENT_DELAY bf16_Mac_reg_B$D_IN;
	if (bf16_Mac_reg_C$EN)
	  bf16_Mac_reg_C <= `BSV_ASSIGNMENT_DELAY bf16_Mac_reg_C$D_IN;
	if (bf16_Mac_result$EN)
	  bf16_Mac_result <= `BSV_ASSIGNMENT_DELAY bf16_Mac_result$D_IN;
	if (int_Mac_reg_A$EN)
	  int_Mac_reg_A <= `BSV_ASSIGNMENT_DELAY int_Mac_reg_A$D_IN;
	if (int_Mac_reg_B$EN)
	  int_Mac_reg_B <= `BSV_ASSIGNMENT_DELAY int_Mac_reg_B$D_IN;
	if (int_Mac_reg_C$EN)
	  int_Mac_reg_C <= `BSV_ASSIGNMENT_DELAY int_Mac_reg_C$D_IN;
	if (int_Mac_result$EN)
	  int_Mac_result <= `BSV_ASSIGNMENT_DELAY int_Mac_result$D_IN;
	if (reg_s1_or_s2$EN)
	  reg_s1_or_s2 <= `BSV_ASSIGNMENT_DELAY reg_s1_or_s2$D_IN;
	if (result$EN) result <= `BSV_ASSIGNMENT_DELAY result$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bf16_Mac_reg_A = 16'hAAAA;
    bf16_Mac_reg_B = 16'hAAAA;
    bf16_Mac_reg_C = 32'hAAAAAAAA;
    bf16_Mac_result = 32'hAAAAAAAA;
    int_Mac_reg_A = 8'hAA;
    int_Mac_reg_B = 8'hAA;
    int_Mac_reg_C = 32'hAAAAAAAA;
    int_Mac_result = 32'hAAAAAAAA;
    reg_s1_or_s2 = 1'h0;
    result = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMacUnitTop

